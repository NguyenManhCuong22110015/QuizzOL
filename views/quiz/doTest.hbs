<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TOEIC Test</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/doTest.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>
</head>

<body>
    <div class="container">
        <div class="left-panel">
            <div class="section-header">
                <i class="fas fa-headphones"></i>
                <h2>{{this.quiz.title}}</h2>
            </div>

            {{#each this.quiz.questions}}
            {{#if (eq type "SINGLE_ANSWER")}}
            <div class="question-card" id="question-{{question_number}}" data-question-id="{{id}}"
                data-question-number="{{question_number}}">
                <span class="question-number">{{question_number}}</span>
                <div class="question-text">{{content}}</div>
                {{#if imageUrl}}
  {{#if (eq mediaType "IMAGE")}}
    <div class="image-placeholder">
      <img src="{{imageUrl}}" alt="Image content" />
    </div>
  {{else if (eq mediaType "VIDEO")}}
    <div class="video-placeholder">
      <video controls>
        <source src="{{imageUrl}}" type="video/mp4" />
        Trình duyệt của bạn không hỗ trợ video.
      </video>
    </div>
  {{else if (eq mediaType "AUDIO")}}
    <div class="audio-placeholder">
      <audio controls>
        <source src="{{imageUrl}}" type="audio/mpeg" />
        Trình duyệt của bạn không hỗ trợ audio.
      </audio>
    </div>
  {{/if}}
{{/if}}

                <div class="options">
                    {{#each options}}
                    <div>
                        <input type="radio" id="q{{../question_number}}_option{{@index}}"
                            name="question-{{../question_number}}" value="{{id}}" {{#if (eq ../option_id
                            id)}}checked{{/if}}>
                        <label for="q{{../question_number}}_option{{@index}}">{{content}}</label>
                    </div>
                    {{/each}}
                </div>
            </div>
            {{else if (eq type "FILL_IN_THE_BLANK")}}
            <div class="question-card" id="question-{{question_number}}" data-question-id="{{id}}"
                data-question-number="{{question_number}}">
                <span class="question-number">{{question_number}}</span>
                <div class="question-text">{{content}}</div>
               {{#if imageUrl}}
  {{#if (eq mediaType "IMAGE")}}
    <div class="image-placeholder">
      <img src="{{imageUrl}}" alt="Image content" />
    </div>
  {{else if (eq mediaType "VIDEO")}}
    <div class="video-placeholder">
      <video controls>
        <source src="{{imageUrl}}" type="video/mp4" />
        Trình duyệt của bạn không hỗ trợ video.
      </video>
    </div>
  {{else if (eq mediaType "AUDIO")}}
    <div class="audio-placeholder">
      <audio controls>
        <source src="{{imageUrl}}" type="audio/mpeg" />
        Trình duyệt của bạn không hỗ trợ audio.
      </audio>
    </div>
  {{/if}}
{{/if}}

                <div class="fill-blank-container">
                    <div class="input-wrapper">
                        <input type="text" id="q{{question_number}}_input" class="fill-blank-input"
                            placeholder="Type your answer here..." value="{{#if text_answer}}{{text_answer}}{{/if}}">
                        <div class="input-border"></div>
                    </div>
                </div>
            </div>
            {{else if (eq type "TRUE_FALSE")}}
            <div class="question-card" id="question-{{question_number}}" data-question-id="{{id}}"
                data-question-number="{{question_number}}">
                <span class="question-number">{{question_number}}</span>
                <div class="question-text">{{content}}</div>
               {{#if imageUrl}}
  {{#if (eq mediaType "IMAGE")}}
    <div class="image-placeholder">
      <img src="{{imageUrl}}" alt="Image content" />
    </div>
  {{else if (eq mediaType "VIDEO")}}
    <div class="video-placeholder">
      <video controls>
        <source src="{{imageUrl}}" type="video/mp4" />
        Trình duyệt của bạn không hỗ trợ video.
      </video>
    </div>
  {{else if (eq mediaType "AUDIO")}}
    <div class="audio-placeholder">
      <audio controls>
        <source src="{{imageUrl}}" type="audio/mpeg" />
        Trình duyệt của bạn không hỗ trợ audio.
      </audio>
    </div>
  {{/if}}
{{/if}}

                <div class="options">
                    {{#each options}}
                    <div>
                        <input type="radio" id="q{{../question_number}}_option{{@index}}"
                            name="question-{{../question_number}}" value="{{id}}">
                        <label for="q{{../question_number}}_option{{@index}}">{{content}}</label>
                    </div>
                    {{/each}}
                </div>
            </div>
            {{else if (eq type "MULTIPLE_ANSWER")}}
            <div class="question-card" id="question-{{question_number}}" data-question-id="{{id}}"
                data-question-number="{{question_number}}">
                <span class="question-number">{{question_number}}</span>
                <div class="question-text">{{content}}</div>
               {{#if imageUrl}}
  {{#if (eq mediaType "IMAGE")}}
    <div class="image-placeholder">
      <img src="{{imageUrl}}" alt="Image content" />
    </div>
  {{else if (eq mediaType "VIDEO")}}
    <div class="video-placeholder">
      <video controls>
        <source src="{{imageUrl}}" type="video/mp4" />
        Trình duyệt của bạn không hỗ trợ video.
      </video>
    </div>
  {{else if (eq mediaType "AUDIO")}}
    <div class="audio-placeholder">
      <audio controls>
        <source src="{{imageUrl}}" type="audio/mpeg" />
        Trình duyệt của bạn không hỗ trợ audio.
      </audio>
    </div>
  {{/if}}
{{/if}}

                <div class="options">
                    {{#each options}}
                    <div>
                        <input type="checkbox" id="q{{../question_number}}_option{{@index}}"
                            name="question-{{../question_number}}" value="{{id}}" class="multiple-choice" {{#if
                            (isOptionSelected ../selected_options id)}}checked{{/if}}>
                        <label for="q{{../question_number}}_option{{@index}}">{{content}}</label>
                    </div>
                    {{/each}}
                </div>
            </div>
            {{/if}}
            {{/each}}



            <button class="submit-button">Submit Answers</button>
        </div>

        <div class="right-panel">
            <div class="timer-container">
                <div class="timer">
                    <p>Time Elapsed:</p>
                    <p class="time" id="timer">00:00</p>
                </div>
                <div class="timer">
                    <p>Time Remaining:</p>
                    <p class="time" id="timeLeft">00:00</p>
                </div>
            </div>
            <button class="submit-button">Submit Answers</button>
            <p class="review-note">Review before submitting.</p>
            <p class="review-note">Click number to jump.</p>
            <div class="section-header">
                <i class="fas fa-list-ol"></i>
                <h2>Question Navigation</h2>
            </div>
            <div class="question-grid">
                {{#each (range 1 numberOfQuestions)}}
                <button onclick="scrollToQuestion({{this}})" id="question-button-{{this}}">{{this}}</button>
                {{/each}}
            </div>
        </div>
    </div>
    <script>
        // Replace the existing media container code
        
        const resultId = '{{resultId}}';
        const startTime = new Date({{ startTimeMs }} || '{{startTime}}');
        const endTime = new Date({{ endTimeMs }} || '{{endTime}}');
        let currentResultId = resultId;

        // Timer variables
        let timeDiff = 0;
        let seconds = 0;
        let minutes = 0;
        let timeLeft = 0; // Time left in seconds

        // Setup timer based on start time
        function initializeTimer() {
            const now = new Date();

            // Calculate how much time has passed since start
            timeDiff = Math.floor((now - startTime) / 1000);
            seconds = timeDiff % 60;
            minutes = Math.floor(timeDiff / 60);

            // Calculate time left until end
            timeLeft = Math.max(0, Math.floor((endTime - now) / 1000));

            updateTimerDisplay();

            // Start the timer
            const timerInterval = setInterval(() => {
                // Update elapsed time
                seconds++;
                if (seconds === 60) {
                    seconds = 0;
                    minutes++;
                }

                // Update time left
                timeLeft--;

                updateTimerDisplay();

                // Check if time is up
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    submitQuiz('Time is up!');
                } else if (timeLeft <= 60) {
                    // Show warning at last minute
                    if (timeLeft === 60) {
                        Swal.fire({
                            title: 'Last Minute!',
                            text: 'You have 1 minute left to complete the quiz.',
                            icon: 'warning',
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        });
                    }

                    // Blink the timer in red during the last minute
                    document.getElementById('timer').classList.add('time-warning');
                } else if (timeLeft === 300) { // 5 minutes left
                    Swal.fire({
                        title: '5 Minutes Left',
                        text: 'You have 5 minutes left to complete the quiz.',
                        icon: 'info',
                        timer: 5000,
                        timerProgressBar: true,
                        showConfirmButton: false
                    });
                }
            }, 1000);
        }

        function updateTimerDisplay() {
            // Format for elapsed time
            const formattedSeconds = String(seconds).padStart(2, '0');
            const formattedMinutes = String(minutes).padStart(2, '0');

            // Format for time left
            const timeLeftMinutes = Math.floor(timeLeft / 60);
            const timeLeftSeconds = timeLeft % 60;
            const formattedTimeLeftMinutes = String(timeLeftMinutes).padStart(2, '0');
            const formattedTimeLeftSeconds = String(timeLeftSeconds).padStart(2, '0');

            // Update displays
            document.getElementById('timer').innerText = `${formattedMinutes}:${formattedSeconds}`;
            document.getElementById('timeLeft').innerText = `${formattedTimeLeftMinutes}:${formattedTimeLeftSeconds}`;
        }

        function scrollToQuestion(questionNumber) {
            const questionElement = document.getElementById(`question-${questionNumber}`);
            if (questionElement) {
                questionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }

        function markCompleted(questionNumber) {
            const button = document.getElementById(`question-button-${questionNumber}`);
            if (button) {
                button.classList.add('completed');
            }
        }

        // Function to handle saving radio button answers
        async function saveRadioAnswer(event) {
            const questionElement = event.target.closest('.question-card');

            if (!questionElement || !currentResultId) return;

            const questionId = questionElement.getAttribute('data-question-id');
            const questionNumber = questionElement.getAttribute('data-question-number');
            const answerId = event.target.value;

            // Visual feedback - mark as completed
            markCompleted(parseInt(questionNumber));

            try {
                // Try to update first
                const updateResponse = await fetch('/user-answer/update', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        resultId: currentResultId,
                        questionId: questionId,
                        answerId: answerId
                    })
                });

                // If update returns 404 (not found), create a new answer
                if (!updateResponse.ok && updateResponse.status === 404) {
                    const addResponse = await fetch('/user-answer/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            resultId: currentResultId,
                            questionId: questionId,
                            answerId: answerId
                        })
                    });

                    if (!addResponse.ok) {
                        throw new Error('Failed to create answer');
                    }
                } else if (!updateResponse.ok) {
                    throw new Error('Failed to update answer');
                }

                console.log(`Successfully saved answer for question ${questionId}`);

            } catch (error) {
                console.error('Error saving answer:', error);

                // Show error notification only if saving fails
                Swal.fire({
                    title: 'Error',
                    text: 'Failed to save your answer. Please try again.',
                    icon: 'error',
                    toast: true,
                    position: 'top-end',
                    timer: 3000,
                    showConfirmButton: false
                });
            }
        }
       

        // Function to handle saving text input answers
        async function saveTextAnswer(event) {
            const questionElement = event.target.closest('.question-card');

            if (!questionElement || !currentResultId) return;

            const questionId = questionElement.getAttribute('data-question-id');
            const questionNumber = questionElement.getAttribute('data-question-number');
            const textAnswer = event.target.value.trim();

            // Only save if there's actual content
            if (!textAnswer) return;

            // Visual feedback - mark as completed
            markCompleted(parseInt(questionNumber));

            try {
                // Try to update first
                const updateResponse = await fetch('/user-answer/update-text', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        resultId: currentResultId,
                        questionId: questionId,
                        textAnswer: textAnswer
                    })
                });

                // If update returns 404 (not found), create a new answer
                if (!updateResponse.ok && updateResponse.status === 404) {
                    const addResponse = await fetch('/user-answer/add-text', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            resultId: currentResultId,
                            questionId: questionId,
                            textAnswer: textAnswer
                        })
                    });

                    if (!addResponse.ok) {
                        throw new Error('Failed to create text answer');
                    }
                } else if (!updateResponse.ok) {
                    throw new Error('Failed to update text answer');
                }

                console.log(`Successfully saved text answer for question ${questionId}`);

            } catch (error) {
                console.error('Error saving text answer:', error);
            }
        }

        // Function to handle saving multiple choice answers (checkboxes)
        async function saveMultipleChoiceAnswers(event) {
            const questionElement = event.target.closest('.question-card');

            if (!questionElement || !currentResultId) return;

            const questionId = questionElement.getAttribute('data-question-id');
            const questionNumber = questionElement.getAttribute('data-question-number');

            // Get all checked options for this question
            const checkedOptions = Array.from(
                questionElement.querySelectorAll('input[type="checkbox"]:checked')
            ).map(checkbox => checkbox.value);

            // Debug info 
            console.log('Saving multiple choice answer:', {
                resultId: currentResultId,
                questionId: questionId,
                optionIds: checkedOptions
            });

            // Visual feedback - mark as completed
            if (checkedOptions.length > 0) {
                markCompleted(parseInt(questionNumber));
            }

            try {
                // Try to update first
                const updateResponse = await fetch('/user-answer/update-multiple', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        resultId: currentResultId,
                        questionId: questionId,
                        optionIds: checkedOptions
                    })
                });

                console.log('Update response status:', updateResponse.status);

                // If update returns 404 (not found), create a new answer
                if (!updateResponse.ok && updateResponse.status === 404) {
                    const addResponse = await fetch('/user-answer/add-multiple', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            resultId: currentResultId,
                            questionId: questionId,
                            optionIds: checkedOptions
                        })
                    });

                    console.log('Add response status:', addResponse.status);

                    if (!addResponse.ok) {
                        throw new Error('Failed to create multiple choice answer');
                    }
                } else if (!updateResponse.ok) {
                    throw new Error('Failed to update multiple choice answer');
                }

                console.log(`Successfully saved multiple choice answer for question ${questionId}`);

            } catch (error) {
                console.error('Error saving multiple choice answer:', error);
                Swal.fire({
                    title: 'Lỗi',
                    text: 'Không thể lưu câu trả lời. Vui lòng thử lại.',
                    icon: 'error',
                    toast: true,
                    position: 'top-end',
                    timer: 3000,
                    showConfirmButton: false
                });
            }
        }

        // Function to submit quiz automatically or manually
        async function submitQuiz(message = 'Submit Quiz?') {
            try {
                // If it's auto-submission due to time expiry
                if (message === 'Time is up!') {
                    Swal.fire({
                        title: message,
                        text: 'Your quiz is being submitted automatically.',
                        icon: 'warning',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    // Mark the result as completed
                    const response = await fetch(`/result/complete/${currentResultId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to complete quiz');
                    }

                    // Wait for 2 seconds to show the notification before redirecting
                    setTimeout(() => {
                        // Redirect to results page
                        window.location.href = `/quiz/check-result/${currentResultId}`;
                    }, 2000);

                    if (!response.ok) {
                        throw new Error('Failed to complete quiz');
                    }

                    return;
                }

                // For manual submission, show confirmation
                Swal.fire({
                    title: message,
                    text: 'Are you sure you want to submit your answers?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    cancelButtonText: 'Cancel'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            // Mark the result as completed
                            const response = await fetch(`/result/complete/${currentResultId}`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                }

                            });

                            if (!response.ok) {
                                throw new Error('Failed to complete quiz');
                            }

                            // Redirect to results page
                            window.location.href = `/quiz/check-result/${currentResultId}`;

                        } catch (error) {
                            console.error('Error submitting quiz:', error);
                            Swal.fire({
                                title: 'Error',
                                text: 'Failed to submit quiz. Please try again.',
                                icon: 'error'
                            });
                        }
                    }
                });
            } catch (error) {
                console.error('Error in submit function:', error);
            }
        }

        // Initialize the quiz when page loads
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize timer based on start time
            initializeTimer();

            // Get existing answers from server
            const existingAnswers = {{{ json existingAnswers }}};

        // When starting a new quiz
        if (!existingAnswers || existingAnswers.length === 0) {
            // Show "new quiz" notification
            Swal.fire({
                title: 'New Quiz',
                text: 'You are starting a new quiz. Good luck!',
                icon: 'success',
                confirmButtonText: 'Start',
                confirmButtonColor: '#4CAF50',
                timer: 5000,
                timerProgressBar: true,
                toast: true,
                position: 'top-end',
                showConfirmButton: false
            });
        } else {
            // Show "continuing quiz" notification
            Swal.fire({
                title: 'Welcome Back!',
                text: 'You are continuing your previous attempt.',
                icon: 'info',
                confirmButtonText: 'Continue',
                confirmButtonColor: '#4CAF50',
                timer: 5000,
                timerProgressBar: true,
                toast: true,
                position: 'top-end',
                showConfirmButton: false
            });

            // Restore previous answers
            existingAnswers.forEach(answer => {
                if (answer.question_id) {
                    const questionElement = document.querySelector(`[data-question-id="${answer.question_id}"]`);
                    if (questionElement) {
                        const questionNumber = questionElement.getAttribute('data-question-number');
                        if (questionNumber) {
                            markCompleted(parseInt(questionNumber));

                            // If single answer, select the right radio button
                            if (answer.option_id) {
                                const radioButton = questionElement.querySelector(`input[type="radio"][value="${answer.option_id}"]`);
                                if (radioButton) {
                                    radioButton.checked = true;
                                }
                            }

                            // If text answer, populate the text field
                            if (answer.text_answer) {
                                const textField = questionElement.querySelector(`input[type="text"]`);
                                if (textField) {
                                    textField.value = answer.text_answer;
                                }
                            }

                            // If multiple choice answer, check the appropriate boxes
                            if (answer.selected_options) {
                                let selectedOptions = [];

                                try {
                                    // Parse JSON string if needed
                                    if (typeof answer.selected_options === 'string') {
                                        selectedOptions = JSON.parse(answer.selected_options);
                                    } else if (Array.isArray(answer.selected_options)) {
                                        selectedOptions = answer.selected_options;
                                    }

                                    // Check each option
                                    if (selectedOptions.length > 0) {
                                        selectedOptions.forEach(optionId => {
                                            const checkbox = questionElement.querySelector(`input[type="checkbox"][value="${optionId}"]`);
                                            if (checkbox) {
                                                checkbox.checked = true;
                                            }
                                        });
                                    }
                                } catch (e) {
                                    console.error('Error parsing selected options:', e);
                                }
                            }
                        }
                    }
                }
            });
        }

        // Add event listeners for radio buttons
        const radioButtons = document.querySelectorAll('input[type="radio"]');
        radioButtons.forEach(radio => {
            radio.addEventListener('change', saveRadioAnswer);
        });

        // Add event listeners for text inputs
        const textInputs = document.querySelectorAll('input[type="text"]');
        textInputs.forEach(input => {
            input.addEventListener('blur', saveTextAnswer);
        });

        // Add event listeners for checkboxes
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', saveMultipleChoiceAnswers);
        });

        // Handle submit button
        document.querySelectorAll('.submit-button').forEach(button => {
            button.addEventListener('click', function () {
                if (!currentResultId) return;
                submitQuiz();
            });
        });
    });
    </script>
</body>

</html>